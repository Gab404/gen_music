import os, pickle, numpy
from tqdm import tqdm
from music21 import instrument, note, stream, chord
from train import create_network
from preprocessing import get_sequencies

def load_data(): # load all notes of data file
    if not os.path.exists("save/notes"):
        print("No data found in './save/notes'")
        exit()
    file = open("save/notes", "rb")
    notes = pickle.load(file)

    return notes

def predict(model, network_input, network_output, notes, duration, sequence_length):
    notes = sorted(set(notes)) # keep and sorted unique notes
    dict_notes_label = dict((label, note) for label, note in enumerate(notes))

    start_seed = numpy.random.randint(0, len(network_input) - 1) # pick random sequence to start
    current_input = network_input[start_seed]
    notes_generated = []
    current_input = numpy.reshape(current_input, (1, len(current_input), 1))

    print("Music generation...")
    for i in tqdm(range(0, duration)):
        predictions = model.predict(current_input, verbose=0)
        index = numpy.argmax(predictions)
        notes_generated.append(dict_notes_label[index])

        # shift network input to the next sequence
        current_input = numpy.roll(current_input, -1)
        current_input = numpy.insert(current_input, -1, index / len(set(notes)), axis=1)

    return notes_generated

def create_midi(prediction_output):
    offset = 0
    output_notes = []

    # create note and chord objects based on the values generated by the model
    for pattern in prediction_output:
        # pattern is a chord
        if ('.' in pattern) or pattern.isdigit():
            notes_in_chord = pattern.split('.')
            notes = []
            for current_note in notes_in_chord:
                new_note = note.Note(int(current_note))
                new_note.storedInstrument = instrument.Piano()
                notes.append(new_note)
            new_chord = chord.Chord(notes)
            new_chord.offset = offset
            output_notes.append(new_chord)
        # pattern is a note
        else:
            new_note = note.Note(pattern)
            new_note.offset = offset
            new_note.storedInstrument = instrument.Piano()
            output_notes.append(new_note)

        # increase offset each iteration so that notes do not stack
        offset += 0.5

    midi_stream = stream.Stream(output_notes)

    midi_stream.write('midi', fp='my_output.mid')


def generate_midi():
    notes = load_data()
    n_vocab = len(set(notes)) # count all unique notes
    network_input, network_output = get_sequencies(notes, n_vocab) # split all notes in sequencies of notes
    model = create_network(network_input, n_vocab)
    model.load_weights("save/weights-100-0.6066.hdf5")
    notes_generated = predict(model, network_input, network_output, notes, 80, 100)
    create_midi(notes_generated)

if __name__ == '__main__':
    generate_midi()